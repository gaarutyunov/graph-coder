[tool.poetry]
name = "graph-coder"
version = "0.1.0"
description = ""
authors = ["German Arutyunov <germanarutyunov@gmail.com>"]
readme = "README.md"
packages = [{include = "graph_coder"}]

[tool.poetry.dependencies]
python = "3.9"
catalyst = "^22.4"
astmonkey = {git = "https://github.com/jepler/astmonkey.git", tag = "ast-fixes"}
networkx = "^2.8.8"
aiofiles = "^22.1.0"
pandas = "^1.5.2"
tokenizers = "^0.13.2"
torch = "1.13.1"
fairseq = "^0.12.2"
einops = "^0.6.0"
timm = "^0.6.12"
tensorboard = "^2.11.2"
transformers = "^4.25.1"
torchaudio = "^0.13.1"
torchvision = "^0.14.1"
torchinfo = "^1.7.1"
chardet = "^5.1.0"
pytorch-fast-transformers = "^0.4.0"
deepspeed = "^0.8.0"
humanize = "^4.6.0"
nest-asyncio = "^1.5.6"
black = {version = "^23.1.0", extras = ["d", "jupyter"]}
performer-pytorch = "^1.1.4"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.0"
coverage = {version = "^7.0.5", extras = ["toml"]}
mypy = "^0.991"
poethepoet = "^0.18.1"
no-implicit-optional = "^1.3"
types-aiofiles = "^22.1.0.6"
types-tqdm = "^4.64.7.11"
pandas-stubs = "^1.5.2.230105"
poetry2conda = "^0.3.0"
types-pyyaml = "^6.0.12.3"
torch-tb-profiler = "^0.4.1"

[tool.poetry2conda]
name = "graph-coder"

[tool.poetry2conda.dependencies]
torch = { name = "pytorch", channel = "pytorch" }
torchvision = { channel = "pytorch" }
torchaudio = { channel = "pytorch" }
torchinfo = { channel = "conda-forge" }
fairseq = { channel = "pip" }
tokenizers = { channel = "pip" }
catalyst = { channel = "pip" }
transformers = { channel = "pip" }
chardet = { channel = "pip" }
pytorch-fast-transformers = { channel = "pip" }
deepspeed = { channel = "pip" }
performer-pytorch = { channel = "pip" }
black = { channel = "conda-forge" }
nest-asyncio = { channel = "conda-forge" }

[tool.black]
line-length = 88
target-version = ["py39"]
include = "\\.pyi?$"
exclude = "tests/data"

[tool.coverage.run]
omit = ["tests/*"]

[tool.coverage.html]
directory = "coverage"

[tool.mypy]
files = "graph_coder"
python_version = "3.9"
exclude = "tests/*data"
ignore_missing_imports = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks]
_test = "coverage run -m pytest"
_report = "coverage report"
_html = "coverage html"
_lcov = "coverage lcov"

[tool.poe.tasks.test]
help = "Run tests and report coverage (html and lcov)"
sequence = ["_test", "_report", "_html", "_lcov"]

[tool.poe.tasks.lint]
help = "Lint typings with mypy"
cmd = "mypy ."

[tool.poe.tasks.fmt]
help = "Format code with black"
cmd = "black ."

[tool.poe.tasks.fix_optional]
help = "Fix optional types with no_implicit_optional"
cmd = "no_implicit_optional ."

[tool.poe.tasks.conda_deps]
help = "Generate conda dependencies"
cmd = "poetry2conda pyproject.toml environment.yaml"
